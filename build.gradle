import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.time.LocalDateTime

plugins {
  id "groovy"
  id "java-library"
  id "maven-publish"
  id "signing"
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"

  id "checkstyle"
  id "org.checkerframework" version "0.6.3"
}

group = "de.hendrik-janssen"
archivesBaseName = "geotiff-tools"
version = "0.1.0"

repositories {
  mavenCentral()
}

dependencies {
  api("org.geolatte:geolatte-geom:1.8.2")

  testImplementation(platform("org.junit:junit-bom:5.8.1"))
  testImplementation("org.junit.jupiter:junit-jupiter")

  testImplementation("org.spockframework:spock-core:2.1-groovy-3.0")

  testImplementation(platform("org.codehaus.groovy:groovy-bom:3.0.8"))
}

java {
  withJavadocJar()
  withSourcesJar()

  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

test {
  useJUnitPlatform()

  testLogging {
    showExceptions = true
    showStandardStreams = true
    events = [TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.PASSED]
    exceptionFormat = TestExceptionFormat.FULL
  }
}

artifacts {
  archives javadocJar, sourcesJar
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)
      pom {
        name = "geotiff-tools"
        description = 'A library for rendering and extracting geokeys from geotiffs and integrating with geolatte-geom.'
        url = 'https://github.com/HendrikJanssen/geotiff-tools'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/HendrikJanssen/geotiff-tools/main/LICENSE'
          }
        }
        developers {
          developer {
            id = 'hjanssen'
            name = 'Hendrik Jan√üen'
          }
        }
        scm {
          url = 'https://github.com/HendrikJanssen/geotiff-tools'
          connection = 'scm:git://github.com/HendrikJanssen/geotiff-tools.git'
          developerConnection = 'scm:git://github.com/HendrikJanssen/geotiff-tools.git'
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt() {
  ext.outputFile = file("$genOutputDir/version.txt")
  outputs.file(outputFile)
  doLast {
    outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${LocalDateTime.now()}
"""
  }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt